{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NN-EUCLID Readme EUCLID stands for Efficient Unsupervised Constitutive Law Identification and Discovery . Visit the project website to learn more. Within the scope of this project we developed NN-EUCLID: NN-EUCLID is a deep-learning based framework to learn hidden material models using full-field displacement and global reaction force measurements. Below we give an overview of the framework: (a,b) Point-wise displacements and reaction forces are recorded for a hyperelastic specimen under quasi-static deformation. Using the point-wise displacements and a finite element mesh of the domain (c), continuous displacement and strain fields are obtained (d,e). An ensemble of physics-consistent ICNN-based constitutive models (f) map the strain fields to stress fields (evaluated at the quadrature point of each element) (g). The stress fields are used to compute the internal and external nodal forces (h,i). Based on the weak form of the conservation of linear momentum, the residual forces are minimized (j) \u2014 point-wise for the free degrees of freedom (h) and aggregated for the fixed degrees of freedom (under each set of Dirichlet constraint with a measured reaction force) (i). The optimization is carried out iteratively to train the parameters of the ICNN-based constitutive models (f). The documentation consists of a file-wise explanation of the code. The code and the Finite Element data used to generate the results shown in the NN-EUCLID paper are available in the GitHub repository .","title":"Home"},{"location":"#nn-euclid-readme","text":"EUCLID stands for Efficient Unsupervised Constitutive Law Identification and Discovery . Visit the project website to learn more. Within the scope of this project we developed NN-EUCLID: NN-EUCLID is a deep-learning based framework to learn hidden material models using full-field displacement and global reaction force measurements. Below we give an overview of the framework: (a,b) Point-wise displacements and reaction forces are recorded for a hyperelastic specimen under quasi-static deformation. Using the point-wise displacements and a finite element mesh of the domain (c), continuous displacement and strain fields are obtained (d,e). An ensemble of physics-consistent ICNN-based constitutive models (f) map the strain fields to stress fields (evaluated at the quadrature point of each element) (g). The stress fields are used to compute the internal and external nodal forces (h,i). Based on the weak form of the conservation of linear momentum, the residual forces are minimized (j) \u2014 point-wise for the free degrees of freedom (h) and aggregated for the fixed degrees of freedom (under each set of Dirichlet constraint with a measured reaction force) (i). The optimization is carried out iteratively to train the parameters of the ICNN-based constitutive models (f). The documentation consists of a file-wise explanation of the code. The code and the Finite Element data used to generate the results shown in the NN-EUCLID paper are available in the GitHub repository .","title":"NN-EUCLID Readme"},{"location":"code_data/","text":"Code Codes are available on GitHub . Data Data are available on GitHub .","title":"Code / Data"},{"location":"code_data/#code","text":"Codes are available on GitHub .","title":"Code"},{"location":"code_data/#data","text":"Data are available on GitHub .","title":"Data"},{"location":"publication/","text":"This browser does not support PDFs. Please download the PDF to view it: Download PDF .","title":"Publication"},{"location":"mdfiles/Example/","text":"Example To train the ICNN to learn the hidden Isihara model from the dataset with high noise conditioning run the following: python main.py Isihara high The script will train a number of neural networks (specified in config.py ) and evaluate each model against the ground-truth model along six deformation paths. The models will be saved in results/Isihara/ . A plot will be saved in results/ including strain energy density and Piola Kirchhoff stress tensor component evaluations along the deformation paths.","title":"Example"},{"location":"mdfiles/Example/#example","text":"To train the ICNN to learn the hidden Isihara model from the dataset with high noise conditioning run the following: python main.py Isihara high The script will train a number of neural networks (specified in config.py ) and evaluate each model against the ground-truth model along six deformation paths. The models will be saved in results/Isihara/ . A plot will be saved in results/ including strain energy density and Piola Kirchhoff stress tensor component evaluations along the deformation paths.","title":"Example"},{"location":"mdfiles/config/","text":"config.py This file contains the hyper- and training parameters of the ICNN for learning the hidden material model using the NN-EUCLID framework. Table A.1 in the paper discusses these parameters. Hyper- and training parameters Parameter Description ensemble_size Number of ICNNs in the ensemble random_init Randomly initialize weights and biases of ICNNs using xavier_uniform n_input Default = 3, i.e., the three principal invariants. n_output Default = 1, i.e., the strain energy density. n_hidden List of number of neurons for each hidden layer. use_dropout Use dropout in ICNN architecture. dropout_rate Dropout probability. use_sftpSquared Use squared softplus activation for the hidden layers. scaling_sftpSq Scale the output after squared softplus activation to mitigate exploding gradients. opt_method Specify the NN optimizer. epochs Number of epochs to train the ICNN lr_schedule Choose a learning rate scheduler to improve convergence and performance. eqb_loss_factor Factor to scale the force residuals at the free DoFs. reaction_loss_factor Factor to scale the force residuals at the fixed DoFs. verbose_frequency Prints the training progress every \\(n^{th}\\) ( \\(n=\\) verbose_frequency ) epoch. Plotting parameters Parameter Description plot_quantities Which quantities to evaluate and plot. strain_paths Which strain paths to evaluate and plot. lw_truth Linewidth of the true strain energy density response. lw_best Linewidth of the strain energy response of accepted models. lw_worst Linewidth of the strain energy response of rejected models. color_truth Color for the true strain energy reponse color_best Color for the strain energy response of accepted models. color_worst Color for the strain energy response of rejected models. alpha_best Opacity of the line for the accepted models. alpha_worst Opacity of the line for the rejected models. g_min, g_max Range of the loading parameter gamma. gamma_steps How many loading steps to take. remove_ensemble_outliers If categorization into accepted and rejected should be made. accept_ratio Defines loss range in which accepted models fall into. fs fontsize","title":"drivers/config"},{"location":"mdfiles/config/#configpy","text":"This file contains the hyper- and training parameters of the ICNN for learning the hidden material model using the NN-EUCLID framework. Table A.1 in the paper discusses these parameters.","title":"config.py"},{"location":"mdfiles/config/#hyper-and-training-parameters","text":"Parameter Description ensemble_size Number of ICNNs in the ensemble random_init Randomly initialize weights and biases of ICNNs using xavier_uniform n_input Default = 3, i.e., the three principal invariants. n_output Default = 1, i.e., the strain energy density. n_hidden List of number of neurons for each hidden layer. use_dropout Use dropout in ICNN architecture. dropout_rate Dropout probability. use_sftpSquared Use squared softplus activation for the hidden layers. scaling_sftpSq Scale the output after squared softplus activation to mitigate exploding gradients. opt_method Specify the NN optimizer. epochs Number of epochs to train the ICNN lr_schedule Choose a learning rate scheduler to improve convergence and performance. eqb_loss_factor Factor to scale the force residuals at the free DoFs. reaction_loss_factor Factor to scale the force residuals at the fixed DoFs. verbose_frequency Prints the training progress every \\(n^{th}\\) ( \\(n=\\) verbose_frequency ) epoch.","title":"Hyper- and training parameters"},{"location":"mdfiles/config/#plotting-parameters","text":"Parameter Description plot_quantities Which quantities to evaluate and plot. strain_paths Which strain paths to evaluate and plot. lw_truth Linewidth of the true strain energy density response. lw_best Linewidth of the strain energy response of accepted models. lw_worst Linewidth of the strain energy response of rejected models. color_truth Color for the true strain energy reponse color_best Color for the strain energy response of accepted models. color_worst Color for the strain energy response of rejected models. alpha_best Opacity of the line for the accepted models. alpha_worst Opacity of the line for the rejected models. g_min, g_max Range of the loading parameter gamma. gamma_steps How many loading steps to take. remove_ensemble_outliers If categorization into accepted and rejected should be made. accept_ratio Defines loss range in which accepted models fall into. fs fontsize","title":"Plotting parameters"},{"location":"mdfiles/features/","text":"features.py computeFeatures_torch(I1, I2, I3): Transforms the three principal invariants of the Cauchy-Green deformation tensor into mixed-deviatoric-volumetric invariants and returns them in a concatenated array. \\(J = \\det(\\mathbf{F}) = I_3^{1/2}\\) \\(\\tilde {I_1} = J^{-2/3}I_1\\) \\(\\tilde {I_2} = J^{-4/3}I_2\\) Input Arguments I1 - 1st invariant I2 - 2nd invariant I3 - 3rd invariant Output Arguments x - \\([\\tilde {I_1}, \\tilde {I_2}, J]\\) getNumberOfFeatures(): Compute number of features. Input Arguments none Output Arguments features.shape[1] - number of features","title":"core/features"},{"location":"mdfiles/features/#featurespy","text":"","title":"features.py"},{"location":"mdfiles/features/#computefeatures_torchi1-i2-i3","text":"Transforms the three principal invariants of the Cauchy-Green deformation tensor into mixed-deviatoric-volumetric invariants and returns them in a concatenated array. \\(J = \\det(\\mathbf{F}) = I_3^{1/2}\\) \\(\\tilde {I_1} = J^{-2/3}I_1\\) \\(\\tilde {I_2} = J^{-4/3}I_2\\) Input Arguments I1 - 1st invariant I2 - 2nd invariant I3 - 3rd invariant Output Arguments x - \\([\\tilde {I_1}, \\tilde {I_2}, J]\\)","title":"computeFeatures_torch(I1, I2, I3):"},{"location":"mdfiles/features/#getnumberoffeatures","text":"Compute number of features. Input Arguments none Output Arguments features.shape[1] - number of features","title":"getNumberOfFeatures():"},{"location":"mdfiles/loadFemData/","text":"loadFemData.py loadFemData(path, AD = True, noiseLevel = 0., noiseType = 'displacement', denoisedDisplacements = None): Load finite element data and add noise (optional). Note that the loaded finite element data might already be perturbed by noise. In that case, adding additional noise is not necessary. Input Arguments path - path to finite element data AD - specify if automatic differention is needed noiseLevel - noise level noiseType - a string list specifying whether noise should be added to displacement or strain denoisedDisplacements - pass denoised displacement data if available Output Arguments dataset - finite element dataset","title":"core/loadFemData"},{"location":"mdfiles/loadFemData/#loadfemdatapy","text":"","title":"loadFemData.py"},{"location":"mdfiles/loadFemData/#loadfemdatapath-ad-true-noiselevel-0-noisetype-displacement-denoiseddisplacements-none","text":"Load finite element data and add noise (optional). Note that the loaded finite element data might already be perturbed by noise. In that case, adding additional noise is not necessary. Input Arguments path - path to finite element data AD - specify if automatic differention is needed noiseLevel - noise level noiseType - a string list specifying whether noise should be added to displacement or strain denoisedDisplacements - pass denoised displacement data if available Output Arguments dataset - finite element dataset","title":"loadFemData(path, AD = True, noiseLevel = 0., noiseType = 'displacement', denoisedDisplacements = None):"},{"location":"mdfiles/main/","text":"main.py This is the main file to train the ICNN-based material model. The arguments to run the file are: <fem_material> - can be any one of the following: NeoHookean , Isihara , HainesWilson , GentThomas , ArrudaBoyce , Ogden , Anisotropy45 , Anisotropy60 , Holzapfel <noise_material> - noise conditioning of the data (can be low or high ) The individual components of the main file are the following: Reads the command line arguments <fem_material> and <noise_material> and loads the datasets accordingly. Initializes ICNN model and assigns randomly sampled weights and biases to it (sampled via xavier_uniform ) Trains a number of ICNNs (equal to ensemble_size defined in config.py ) each with randomly initialized weights. Saves each model to the output directory defined in config.py . Once all models are trained evaluate_icnn() is called to evaluate each ICNN in the ensemble and plot the performance against the ground truth model along six deformation paths.","title":"drivers/main"},{"location":"mdfiles/main/#mainpy","text":"This is the main file to train the ICNN-based material model. The arguments to run the file are: <fem_material> - can be any one of the following: NeoHookean , Isihara , HainesWilson , GentThomas , ArrudaBoyce , Ogden , Anisotropy45 , Anisotropy60 , Holzapfel <noise_material> - noise conditioning of the data (can be low or high ) The individual components of the main file are the following: Reads the command line arguments <fem_material> and <noise_material> and loads the datasets accordingly. Initializes ICNN model and assigns randomly sampled weights and biases to it (sampled via xavier_uniform ) Trains a number of ICNNs (equal to ensemble_size defined in config.py ) each with randomly initialized weights. Saves each model to the output directory defined in config.py . Once all models are trained evaluate_icnn() is called to evaluate each ICNN in the ensemble and plot the performance against the ground truth model along six deformation paths.","title":"main.py"},{"location":"mdfiles/model/","text":"model.py Here we define custom PyTorch classes used in our NN-EUCLID framework. class convexLinear(torch.nn.Module): Custom linear layer with enforced positive weights and no bias. The operation is done as follows: \\(z = softplus(W)*x\\) where \\(W\\) contains size_in*size_out trainable parameters. Initialization arguments: size_in - Input dimension size_out - Output dimension Input arguments: x - input data Output arguments: z - linear transformation of x class ICNN(torch.nn.Module): Material model based on Input convex neural network. Initialization arguments: n_input - Input layer size n_hidden - List with number of neurons for each layer n_output - Output layer size use_dropout - Activate dropout during training dropout_rate - Dropout probability. anisotropy_flag - Possible arguments: { single , double } -> type of fiber families fiber_type - Possible arguments: { mirror , general } -> type of fiber arrangement in case of two (or more) fiber families. In case of mirror the second fiber is set as: \\(\\alpha_2 = -\\alpha_1\\) . In case of general the second fiber is set as: \\(\\alpha_2 = \\alpha_1+90\u00b0\\) . Input arguments: x - Deformation gradient in the form: (F11,F12,F21,F22) Output arguments: W_NN = NN-based strain energy density","title":"drivers/model"},{"location":"mdfiles/model/#modelpy","text":"Here we define custom PyTorch classes used in our NN-EUCLID framework.","title":"model.py"},{"location":"mdfiles/model/#class-convexlineartorchnnmodule","text":"Custom linear layer with enforced positive weights and no bias. The operation is done as follows: \\(z = softplus(W)*x\\) where \\(W\\) contains size_in*size_out trainable parameters. Initialization arguments: size_in - Input dimension size_out - Output dimension Input arguments: x - input data Output arguments: z - linear transformation of x","title":"class convexLinear(torch.nn.Module):"},{"location":"mdfiles/model/#class-icnntorchnnmodule","text":"Material model based on Input convex neural network. Initialization arguments: n_input - Input layer size n_hidden - List with number of neurons for each layer n_output - Output layer size use_dropout - Activate dropout during training dropout_rate - Dropout probability. anisotropy_flag - Possible arguments: { single , double } -> type of fiber families fiber_type - Possible arguments: { mirror , general } -> type of fiber arrangement in case of two (or more) fiber families. In case of mirror the second fiber is set as: \\(\\alpha_2 = -\\alpha_1\\) . In case of general the second fiber is set as: \\(\\alpha_2 = \\alpha_1+90\u00b0\\) . Input arguments: x - Deformation gradient in the form: (F11,F12,F21,F22) Output arguments: W_NN = NN-based strain energy density","title":"class ICNN(torch.nn.Module):"},{"location":"mdfiles/post_process/","text":"post_process.py This file contains scripts to evaluate trained ICNN models and visualize their performances. evaluate_icnn(model, fem_material, noise_level, plot_quantities, output_dir) : Evaluates the trained model along six deformation paths and compares it to the ground truth model. Input arguments : model - Trained model class instance. fem_material - String specifying the name of the hidden material noise_level - Possible arguments:{ low , high } plot_quantities - Possible arguments: { W , P }. Defined in config.py . output_dir - Output directory name (defined in config.py ) Output arguments: Plot(s) will be saved evaluating the performance of ICNN-based model against the ground truth model of fem_material along six deformation paths. compute_corrected_W(F) : Computes the strain energy density according to Ansatz (Eq. 8) using the trained model instance inside evaluate_icnn() function call. Input arguments : F - Deformation gradient F in form (F11,F12,F21,F22) Output arguments : W - Strain energy density according to Ansatz (Eq. 8) get_true_W(fem_material,J,C,I1,I2,I3) : Computes the strain energy densities given the strains using the analytical description of benchmark hyperelastic material models. Input arguments : fem_material - String containing the name of the benchmark hyperelastic material. J - Jacobian of Cauchy-Green deformation matrix. C - Cauchy-Green deformation matrix. I1 - 1st invariant of Cauchy-Green deformation matrix. I2 - 2nd invariant of Cauchy-Green deformation matrix. I3 - 3rd invariant of Cauchy-Green deformation matrix. Output arguments : W - Strain energy density of the specified material for the given strain.","title":"drivers/post_process"},{"location":"mdfiles/post_process/#post_processpy","text":"This file contains scripts to evaluate trained ICNN models and visualize their performances.","title":"post_process.py"},{"location":"mdfiles/post_process/#evaluate_icnnmodel-fem_material-noise_level-plot_quantities-output_dir","text":"Evaluates the trained model along six deformation paths and compares it to the ground truth model. Input arguments : model - Trained model class instance. fem_material - String specifying the name of the hidden material noise_level - Possible arguments:{ low , high } plot_quantities - Possible arguments: { W , P }. Defined in config.py . output_dir - Output directory name (defined in config.py ) Output arguments: Plot(s) will be saved evaluating the performance of ICNN-based model against the ground truth model of fem_material along six deformation paths.","title":"evaluate_icnn(model, fem_material, noise_level, plot_quantities, output_dir):"},{"location":"mdfiles/post_process/#compute_corrected_wf","text":"Computes the strain energy density according to Ansatz (Eq. 8) using the trained model instance inside evaluate_icnn() function call. Input arguments : F - Deformation gradient F in form (F11,F12,F21,F22) Output arguments : W - Strain energy density according to Ansatz (Eq. 8)","title":"compute_corrected_W(F):"},{"location":"mdfiles/post_process/#get_true_wfem_materialjci1i2i3","text":"Computes the strain energy densities given the strains using the analytical description of benchmark hyperelastic material models. Input arguments : fem_material - String containing the name of the benchmark hyperelastic material. J - Jacobian of Cauchy-Green deformation matrix. C - Cauchy-Green deformation matrix. I1 - 1st invariant of Cauchy-Green deformation matrix. I2 - 2nd invariant of Cauchy-Green deformation matrix. I3 - 3rd invariant of Cauchy-Green deformation matrix. Output arguments : W - Strain energy density of the specified material for the given strain.","title":"get_true_W(fem_material,J,C,I1,I2,I3):"},{"location":"mdfiles/train/","text":"train.py This file contains scripts to train the ICNN using the physics-guided loss function. train_weak(model, datasets, fem_material, noise_level) : Input arguments : model - class instance of the ICNN model that is to be trained. datasets - dataset to be used to train the ICNN model. fem_material - name of the material to be learned (for file naming convention). noise_level - level of noise used to condition the dataset (for file naming convention). Output arguments : model - returns trained model class instance loss_history - returns loss history","title":"drivers/train"},{"location":"mdfiles/train/#trainpy","text":"This file contains scripts to train the ICNN using the physics-guided loss function.","title":"train.py"},{"location":"mdfiles/train/#train_weakmodel-datasets-fem_material-noise_level","text":"Input arguments : model - class instance of the ICNN model that is to be trained. datasets - dataset to be used to train the ICNN model. fem_material - name of the material to be learned (for file naming convention). noise_level - level of noise used to condition the dataset (for file naming convention). Output arguments : model - returns trained model class instance loss_history - returns loss history","title":"train_weak(model, datasets, fem_material, noise_level):"},{"location":"mdfiles/utilities/","text":"utilities.py computeCauchyGreenStrain(F): Compute right Cauchy-Green strain tensor from deformation gradient. Input Arguments F - deformation gradient in Voigt notation Output Arguments C - Cauchy-Green strain tensor in Voigt notation computeJacobian(F): Compute Jacobian from deformation gradient. Input Arguments F - deformation gradient in Voigt notation Output Arguments J - Jacobian computeStrainInvariantDerivatives(F,i,secondDerivative=False): Compute derivatives of the invariants of the Cauchy-Green strain tensor with respect to the deformation gradient. Plane strain is assumed. Input Arguments F - deformation gradient in Voigt notation i - specify the invariant that should be differentiated- I1, I2, I3, Ia or Ib secondDerivative - specify if second derivative should be computed Output Arguments dIdF - derivative (note that the size of dIdF depends on the choice of secondDerivative ) computeStrainInvariants(C): Compute invariants of the Cauchy-Green strain tensor. Plane strain is assumed. Input Arguments C - Cauchy-Green strain tensor in Voigt notation Output Arguments I1 - 1st invariant I2 - 2nd invariant I3 - 3rd invariant getStrainPathDeformationGradient(strain_path, gamma_steps, gamma): Generate deformation gradients based on a given strain path. Input Arguments strain path - A two letter string defining one of the elementary strain strain_paths gamma - Gamma loading parameter for the deformation gradient. gamma steps - Specifies how many steps should be taken from F(gamma=0) to F(gamma=gamma) Output Arguments F - Deformation gradient in Voigt notation. x-label - Label for plotting","title":"core/utilities"},{"location":"mdfiles/utilities/#utilitiespy","text":"","title":"utilities.py"},{"location":"mdfiles/utilities/#computecauchygreenstrainf","text":"Compute right Cauchy-Green strain tensor from deformation gradient. Input Arguments F - deformation gradient in Voigt notation Output Arguments C - Cauchy-Green strain tensor in Voigt notation","title":"computeCauchyGreenStrain(F):"},{"location":"mdfiles/utilities/#computejacobianf","text":"Compute Jacobian from deformation gradient. Input Arguments F - deformation gradient in Voigt notation Output Arguments J - Jacobian","title":"computeJacobian(F):"},{"location":"mdfiles/utilities/#computestraininvariantderivativesfisecondderivativefalse","text":"Compute derivatives of the invariants of the Cauchy-Green strain tensor with respect to the deformation gradient. Plane strain is assumed. Input Arguments F - deformation gradient in Voigt notation i - specify the invariant that should be differentiated- I1, I2, I3, Ia or Ib secondDerivative - specify if second derivative should be computed Output Arguments dIdF - derivative (note that the size of dIdF depends on the choice of secondDerivative )","title":"computeStrainInvariantDerivatives(F,i,secondDerivative=False):"},{"location":"mdfiles/utilities/#computestraininvariantsc","text":"Compute invariants of the Cauchy-Green strain tensor. Plane strain is assumed. Input Arguments C - Cauchy-Green strain tensor in Voigt notation Output Arguments I1 - 1st invariant I2 - 2nd invariant I3 - 3rd invariant","title":"computeStrainInvariants(C):"},{"location":"mdfiles/utilities/#getstrainpathdeformationgradientstrain_path-gamma_steps-gamma","text":"Generate deformation gradients based on a given strain path. Input Arguments strain path - A two letter string defining one of the elementary strain strain_paths gamma - Gamma loading parameter for the deformation gradient. gamma steps - Specifies how many steps should be taken from F(gamma=0) to F(gamma=gamma) Output Arguments F - Deformation gradient in Voigt notation. x-label - Label for plotting","title":"getStrainPathDeformationGradient(strain_path, gamma_steps, gamma):"}]}